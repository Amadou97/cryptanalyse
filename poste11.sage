#TME #3 : attaque à messages liés sur RSA

C = "965600f6f74509ea1e6c9d737e296913ca359c90d20a430f4ce85c694510ce5a9a65ab637b912420c72b8bde50f3453092b45388a874be9f1253821c8521fc753a103b7a916cb063de27af8a7b9658eeec91a0b7bd3a698e9ee87d37d1aa7928747035f75ea16a323d567274b556a5a6632f73879793437543fb712288f5f109c1faf0c25618c4af72a604911bdcd168414eb587a33a7addfbfb700581e43e9390840f410105c3173ff14d1369d8a42ab6461788115f7280f5b8390a45ba51884082b26f6b2cd32e3dcb1bb85320da462d6da9f0a405bcea31834c0db248d2e957a51015c2cb4c296e5525fa5dda8a5846ae23522bddb6ef0c8ace27b5f9b57d"
CC= "312e7b9e987f5199adaa383e590d42f61f52eaf5b8fd33399e710a8d3c5e4a369e7ff96720e3cf8b801d906c6097107d2986701e13d9706ac4b3ff773edb759a3da17cfa6603aa868ea93de63861bc56c467aa50cfc2e98a828fc2566cfe62f9dab5e04852f273e0dafd4fc5b1fee13a565b26c1fb38a2d74c9766ecbb6407d6b93b1d912d28880e8e54a7806a8b13098571bdd54bab3b4a165e6a1a7909bb928d09941c752b945ec38e197ca2182e77ebe516b9dd1eaf99db815fe5a2630fa7bc8a1028ac388d14c889670c87efd27bbe1be338b82fcfd5aed4630f39eac2c39f1f81ea89fcc205c62da79bf7bef153c174a6057d53b590e76b7e85e8da55bf"

c1 = int(C, 16)
c2 = int(CC, 16)
N = 22768605212201992166455871496320312011192479111231265031521144037919618786760696111016900180984206112606202990179424459706389119870324454407402661795020027787909470682874837085174561289713171261830338162435583298263085928704656385235706215577953753300348746080950691956009284724234339119011646656263227818411746149344973785931184241957491308966973421042466040830430454528803564629217433544154452627910895997478953327712933957227886729126532800484039631483602158032614791470234970378182174266157226020387907836397675218519099810646773079743857079521334613856493429645903002929423197066316341816577330606966133909924589
e = 2053


R.<X> = Zmod(N)[]
f1 = X^e - c1
f2 = (X + 1)^e - c2

# GCD is not implemented for rings over composite modulus in Sage
# so we'll do it ourselves. Might fail in rare cases, but we
# don't care.
def my_gcd(a, b):
    return a.monic() if b == 0 else my_gcd(b, a % b)



M = -my_gcd(f1, f2).coefficients()[0]
M = hex(M)
message = M[2:]
clair = bytes.fromhex(message).decode('utf-8')
print(clair)