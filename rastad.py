import gmpy2
gmpy2.get_context().precision = 2048
from gmpy2 import root
import numpy as np

import base64

# 2-extraire les infos de la clÃ© publique: openssl pkey  -pubin -pubout -text -in key.txt

EXPONENT = 3

cc1 = "25c34eaf4b104238a496a76e19ead0372b0ef127e4a8256e097b029e3f48285c853a990e218a6721605a4730a8646147fac30106e78c1c436e3c08da782549a3e12f8645d544b6491bbe873d33136ba2558f666a20b2cf26f11b5dc031086f128078eac3c15f0faafafdf23857abf1cb76fbbff41496ff475c847431669fc466019263fb932232f0ca0c2d308afe051598cd0746c8bc03fd5ff26ff66c626bcee29bcc013a0fdc3503a5dcbcc64d4e60c83d3aa079ddc1420d4bada59d1f7d0b734a312a6a4075511b38ad5c3f67261073f7ff89625acb55ad7fa6d4e8a59dc5ff71450e3eb1327ade3b05da93f1536198d1586d61f66c53c14a73c62d6d8a2a"
cc2 = "5c1385880b36f2f673d70c11bcac13909bda505a002c3265c067b48eb527e367a53885285d8dfce4971368fc69c0908d47e7be2a2ee8180e4cb5e720c7ee2b30149d11cd5e08aa11611ad4229c7d9fcbc910d376ce0217f3158ab0fe6ac7676dc7715fa71ce2c978d134a2dad2b32d754493738b423d1b1bf7651f957970086329f422df944925d10e4ee6cbfd3f230df94a2aabede907830044611a25c2174e3e3ff87f2a093e6cd0ebac3bf971be4154411d3726fe85db6542935b233f1ce5bd52536285b04a2fb74d783bd7823a6bf849d1c9de6b5310d72b7848d3236b736dc4fe19e562ddb14d71a5c57b5820b0d586f2955b79d3f620dd14ea7f93307e"
cc3 = "3a4662394cf969906639511b2541269dd72e0d007db91220caa16723727b0f78fbce81aa59c3879d1bb1367100fbfd55192634e5157864f34921f4bc0ff8f86d48f6164204007dcec5d01d05fbbe85f4d55dc03c1a2f7a8198ff4e0819a3b03ffc862ad9e775a48e636464e492cbbb4b43b7384084fa4b1168bd10b72056405f8dd4b280e14facbeb1ca9aba734c69acd8f4a9364e853746354d7beac30a1cff7325854b3de2cb59f7b6e0c0c16dc833689ae0605a7c677e7aee4a37a55ac7514a0af61a4ae5a0b5766da764719c13faed7fdd93e3f2a185021d7dc88775c1b33cde98318f848e9e1eccc8979ea48c53614b61926d7782954fb9d398145b73b0"

CIPHERTEXT_1 = int(cc1, 16)
CIPHERTEXT_2 = int(cc2, 16)
CIPHERTEXT_3 = int(cc3, 16)

MODULUS_1 = 23823335177130458074674838099141057981210786567900584133033920813610627118897515652540760574755159886832447758317681088462315480146740001801911371971624684233263848965350718559823519927965415788524845175840924609508589688759387689531930240094305367778762095157344565668904382706506726508959154129548553186685879279034646638236895833904713835346478919551302712614517224472087593101316513380169150053730348717630890122569185037877572733268767924796596606777875012936860580591250123180836943160796401222050829773799077339146418395085560569054756661412405335387782458470028404688383136823257793211397644865465981675850147
MODULUS_2 = 18586936365662830829902765443775312795741591237763174895651196049732330872935348953673572741173538480020633304668739525171952468999946216452522705675333497745794129808609931531599033006852693633506930752719966508885601616797980837380264071004679014584341564066038936460836563351321535127591550575685985964258258742804388307307978383412178351287478322198594370260016785911521892326983244510413761617242571751666951198847145560756701372132646515324052363107941594490388566981600983046215793538304919488000313804302357297769263831288008988076694709118745621823771271447460358154965062361801452353191328018022421459631853
MODULUS_3 = 23321888532302769561850889277275433365875942746848386252358606375026798812521279972102649359655309772098220182212715850098777231060479446986544359856069985676438339527935384349804787320466395610162298579501914555017136220593367541341617808251717739374785987153590133440991411903776354019160699440161367437164115405712936675443863015208364806984123091114271984430755149481092492850240227722961194175681494140301634096770921637699241081730258321284901496635990917132209107212930398902830407866510000351731761252902701809560003816747166771454911871211775775821212233472019317426435709115923366890187841629870646027075937

"""
CIPHERTEXT_1 = 3
CIPHERTEXT_2 = 4
CIPHERTEXT_3 = 5

MODULUS_1 = 17
MODULUS_2 = 11
MODULUS_3 = 6
"""


def chinese_remainder_theorem(items):
    # Determine N, the product of all n_i
    N = 1
    for a, n in items:
        N *= n

    # Find the solution (mod N)
    result = 0
    for a, n in items:
        m = N // n  # mi = n /ni
        #m = gmpy2.f_div(N, n)
        s = extended_gcd(m, n)  # yi = inverse modulo mi par ni , ni == modulo
        result += a * s * m
    return result % N


def extended_gcd(a, b):
    x, y = 0, 1
    lastx, lasty = 1, 0

    while b:
        a, (q, b) = b, divmod(a, b)
        x, lastx = lastx - q * x, x
        y, lasty = lasty - q * y, y

    return lastx


def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1:
        return 1
    while a > 1:
        q = a // b
        a, b = b, a % b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += b0
    return x1


def get_value(filename):
    with open(filename) as f:
        value = f.readline()
    return int(value, 16)


if __name__ == '__main__':

    C1 = CIPHERTEXT_1
    C2 = CIPHERTEXT_2
    C3 = CIPHERTEXT_3
    ciphertexts = [C1, C2, C3]

    N1 = MODULUS_1
    N2 = MODULUS_2
    N3 = MODULUS_3

    modulus = [N1, N2, N3]

    ME = chinese_remainder_theorem([(C1, N1), (C2, N2), (C3, N3)])
    M = int(root(ME, EXPONENT))

    #print(C1)

    #print(M)

    #print(pow(M, 3, N1))
    M = hex(M)
    #print(M)
    message = M[2:]
    print(message)
    clair = bytes.fromhex(message).decode('utf-8')
    print(clair)
